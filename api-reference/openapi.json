{
  "openapi": "3.0.0",
  "info": {
    "title": "Tulip API",
    "version": "v2"
  },
  "tags": [
    {
      "name": "Renters"
    },
    {
      "name": "Products"
    },
    {
      "name": "Contracts"
    },
    {
      "name": "Geo"
    }
  ],
  "paths": {
    "/contracts": {
      "get": {
        "operationId": "Récupérer un ensemble de contrats",
        "description": "Ce endpoint permet de récupérer un ensemble de contrats",
        "parameters": [
          {
            "name": "uid",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UserId"
            },
            "explode": false
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PaginationSkip"
            },
            "explode": false
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PaginationLimit"
            },
            "explode": false
          },
          {
            "name": "test",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ContractTest"
            },
            "explode": false
          }
        ],
        "responses": {
          "200": {
            "description": "Les contrats",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "contracts": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Contract"
                      }
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "success"
                      ]
                    },
                    "execution_id": {
                      "$ref": "#/components/schemas/ApiExecutionId"
                    }
                  },
                  "required": [
                    "contracts",
                    "status",
                    "execution_id"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Erreurs lors de la récupération des contrats",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "execution_id": {
                      "$ref": "#/components/schemas/ApiExecutionId"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "error"
                      ]
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "bad_request"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "enum": [
                        "bad request"
                      ]
                    },
                    "error": {
                      "$ref": "#/components/schemas/Error1051"
                    }
                  },
                  "required": [
                    "execution_id",
                    "status",
                    "type",
                    "message",
                    "error"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Contracts"
        ],
        "security": [
          {
            "Auth": []
          }
        ]
      },
      "post": {
        "operationId": "Créer un contrat",
        "description": "Ce endpoint permet de créer un contrat. Si le paramètre preview est à true, ceci ne créera pas le contrat mais retournera un contrat prévisualisé.",
        "parameters": [
          {
            "name": "preview",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Preview"
            },
            "explode": false
          }
        ],
        "responses": {
          "200": {
            "description": "Réponse lors de la création d'un contrat",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "contract": {
                      "$ref": "#/components/schemas/Contract"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "success"
                      ]
                    },
                    "execution_id": {
                      "$ref": "#/components/schemas/ApiExecutionId"
                    }
                  },
                  "required": [
                    "contract",
                    "status",
                    "execution_id"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Erreurs lors de la création d'un contrat",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "execution_id": {
                      "$ref": "#/components/schemas/ApiExecutionId"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "error"
                      ]
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "bad_request"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "enum": [
                        "bad request"
                      ]
                    },
                    "error": {
                      "anyOf": [
                        {
                          "$ref": "#/components/schemas/Error1000"
                        },
                        {
                          "$ref": "#/components/schemas/Error1001"
                        },
                        {
                          "$ref": "#/components/schemas/Error1002"
                        },
                        {
                          "$ref": "#/components/schemas/Error1003"
                        },
                        {
                          "$ref": "#/components/schemas/Error1004"
                        },
                        {
                          "$ref": "#/components/schemas/Error1005"
                        },
                        {
                          "$ref": "#/components/schemas/Error1006"
                        },
                        {
                          "$ref": "#/components/schemas/Error1007"
                        },
                        {
                          "$ref": "#/components/schemas/Error1008"
                        },
                        {
                          "$ref": "#/components/schemas/Error1009"
                        },
                        {
                          "$ref": "#/components/schemas/Error1010"
                        },
                        {
                          "$ref": "#/components/schemas/Error1011"
                        },
                        {
                          "$ref": "#/components/schemas/Error1012"
                        },
                        {
                          "$ref": "#/components/schemas/Error1013"
                        },
                        {
                          "$ref": "#/components/schemas/Error1014"
                        },
                        {
                          "$ref": "#/components/schemas/Error1015"
                        },
                        {
                          "$ref": "#/components/schemas/Error1016"
                        },
                        {
                          "$ref": "#/components/schemas/Error1017"
                        },
                        {
                          "$ref": "#/components/schemas/Error1018"
                        },
                        {
                          "$ref": "#/components/schemas/Error1019"
                        },
                        {
                          "$ref": "#/components/schemas/Error1020"
                        },
                        {
                          "$ref": "#/components/schemas/Error1021"
                        },
                        {
                          "$ref": "#/components/schemas/Error1022"
                        },
                        {
                          "$ref": "#/components/schemas/Error1100"
                        },
                        {
                          "$ref": "#/components/schemas/Error1101"
                        },
                        {
                          "$ref": "#/components/schemas/Error1102"
                        },
                        {
                          "$ref": "#/components/schemas/Error1103"
                        },
                        {
                          "$ref": "#/components/schemas/Error1104"
                        },
                        {
                          "$ref": "#/components/schemas/Error1105"
                        },
                        {
                          "$ref": "#/components/schemas/Error1106"
                        },
                        {
                          "$ref": "#/components/schemas/Error1107"
                        },
                        {
                          "$ref": "#/components/schemas/Error1108"
                        },
                        {
                          "$ref": "#/components/schemas/Error1109"
                        },
                        {
                          "$ref": "#/components/schemas/Error1200"
                        },
                        {
                          "$ref": "#/components/schemas/Error1201"
                        },
                        {
                          "$ref": "#/components/schemas/Error1202"
                        },
                        {
                          "$ref": "#/components/schemas/Error1203"
                        },
                        {
                          "$ref": "#/components/schemas/Error1220"
                        },
                        {
                          "$ref": "#/components/schemas/Error1221"
                        },
                        {
                          "$ref": "#/components/schemas/Error1222"
                        },
                        {
                          "$ref": "#/components/schemas/Error1223"
                        },
                        {
                          "$ref": "#/components/schemas/Error1224"
                        },
                        {
                          "$ref": "#/components/schemas/Error1225"
                        },
                        {
                          "$ref": "#/components/schemas/Error1226"
                        },
                        {
                          "$ref": "#/components/schemas/Error1227"
                        },
                        {
                          "$ref": "#/components/schemas/Error1228"
                        },
                        {
                          "$ref": "#/components/schemas/Error1229"
                        },
                        {
                          "$ref": "#/components/schemas/Error1400"
                        },
                        {
                          "$ref": "#/components/schemas/Error1401"
                        },
                        {
                          "$ref": "#/components/schemas/Error1402"
                        },
                        {
                          "$ref": "#/components/schemas/Error1403"
                        },
                        {
                          "$ref": "#/components/schemas/Error1404"
                        },
                        {
                          "$ref": "#/components/schemas/Error1405"
                        },
                        {
                          "$ref": "#/components/schemas/Error1406"
                        },
                        {
                          "$ref": "#/components/schemas/Error1407"
                        },
                        {
                          "$ref": "#/components/schemas/Error1408"
                        },
                        {
                          "$ref": "#/components/schemas/Error1409"
                        },
                        {
                          "$ref": "#/components/schemas/Error1410"
                        },
                        {
                          "$ref": "#/components/schemas/Error98888"
                        },
                        {
                          "$ref": "#/components/schemas/Error99888"
                        }
                      ]
                    }
                  },
                  "required": [
                    "execution_id",
                    "status",
                    "type",
                    "message",
                    "error"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Contracts"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateContractRequest"
              }
            }
          }
        },
        "security": [
          {
            "Auth": []
          }
        ]
      }
    },
    "/contracts/{contractId}": {
      "get": {
        "operationId": "Récupérer un contrat",
        "description": "Ce endpoint permet de récupérer un contrat",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ContractId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Le contrat",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "contract": {
                      "$ref": "#/components/schemas/Contract"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "success"
                      ]
                    },
                    "execution_id": {
                      "$ref": "#/components/schemas/ApiExecutionId"
                    }
                  },
                  "required": [
                    "contract",
                    "status",
                    "execution_id"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Erreurs lors de la récupération d'un contrat",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "execution_id": {
                      "$ref": "#/components/schemas/ApiExecutionId"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "error"
                      ]
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "bad_request"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "enum": [
                        "bad request"
                      ]
                    },
                    "error": {
                      "$ref": "#/components/schemas/Error1051"
                    }
                  },
                  "required": [
                    "execution_id",
                    "status",
                    "type",
                    "message",
                    "error"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Contracts"
        ],
        "security": [
          {
            "Auth": []
          }
        ]
      },
      "delete": {
        "operationId": "Résiler un contrat",
        "description": "Ce endpoint permet de résilier ou annuler un contrat. Si le paramètre preview est à true, ceci ne résiliera pas le contrat mais retournera un contrat prévisualisé.\n\nSi le contrat a démarré depuis peu, il sera annulé.",
        "parameters": [
          {
            "name": "preview",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Preview"
            },
            "explode": false
          },
          {
            "name": "contractId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ContractId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Réponse lors de la résiliation d'un contrat",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "contract": {
                      "$ref": "#/components/schemas/Contract"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "success"
                      ]
                    },
                    "execution_id": {
                      "$ref": "#/components/schemas/ApiExecutionId"
                    }
                  },
                  "required": [
                    "contract",
                    "status",
                    "execution_id"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Erreurs lors de la résiliation d'un contrat",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "execution_id": {
                      "$ref": "#/components/schemas/ApiExecutionId"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "error"
                      ]
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "bad_request"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "enum": [
                        "bad request"
                      ]
                    },
                    "error": {
                      "anyOf": [
                        {
                          "$ref": "#/components/schemas/Error1001"
                        },
                        {
                          "$ref": "#/components/schemas/Error1002"
                        },
                        {
                          "$ref": "#/components/schemas/Error1021"
                        },
                        {
                          "$ref": "#/components/schemas/Error1051"
                        },
                        {
                          "$ref": "#/components/schemas/Error1351"
                        },
                        {
                          "$ref": "#/components/schemas/Error1352"
                        },
                        {
                          "$ref": "#/components/schemas/Error98888"
                        },
                        {
                          "$ref": "#/components/schemas/Error99888"
                        }
                      ]
                    }
                  },
                  "required": [
                    "execution_id",
                    "status",
                    "type",
                    "message",
                    "error"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Contracts"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TerminateContractRequest"
              }
            }
          }
        },
        "security": [
          {
            "Auth": []
          }
        ]
      },
      "patch": {
        "operationId": "Mettre à jour un contrat",
        "description": "Ce endpoint permet de mettre à jour un contrat. Si le paramètre preview est à true, ceci ne mettra pas à jour le contrat mais retournera un contrat prévisualisé.",
        "parameters": [
          {
            "name": "preview",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Preview"
            },
            "explode": false
          },
          {
            "name": "contractId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ContractId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "La réponse de la mise à jour d'un contrat",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "contract": {
                      "$ref": "#/components/schemas/Contract"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "success"
                      ]
                    },
                    "execution_id": {
                      "$ref": "#/components/schemas/ApiExecutionId"
                    }
                  },
                  "required": [
                    "contract",
                    "status",
                    "execution_id"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Les erreurs de la mise à jour d'un contrat",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "execution_id": {
                      "$ref": "#/components/schemas/ApiExecutionId"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "error"
                      ]
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "bad_request"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "enum": [
                        "bad request"
                      ]
                    },
                    "error": {
                      "anyOf": [
                        {
                          "$ref": "#/components/schemas/Error1000"
                        },
                        {
                          "$ref": "#/components/schemas/Error1001"
                        },
                        {
                          "$ref": "#/components/schemas/Error1002"
                        },
                        {
                          "$ref": "#/components/schemas/Error1003"
                        },
                        {
                          "$ref": "#/components/schemas/Error1050"
                        },
                        {
                          "$ref": "#/components/schemas/Error1051"
                        },
                        {
                          "$ref": "#/components/schemas/Error1052"
                        },
                        {
                          "$ref": "#/components/schemas/Error1102"
                        },
                        {
                          "$ref": "#/components/schemas/Error1106"
                        },
                        {
                          "$ref": "#/components/schemas/Error1107"
                        },
                        {
                          "$ref": "#/components/schemas/Error1108"
                        },
                        {
                          "$ref": "#/components/schemas/Error1109"
                        },
                        {
                          "$ref": "#/components/schemas/Error1150"
                        },
                        {
                          "$ref": "#/components/schemas/Error1330"
                        },
                        {
                          "$ref": "#/components/schemas/Error1331"
                        },
                        {
                          "$ref": "#/components/schemas/Error1332"
                        },
                        {
                          "$ref": "#/components/schemas/Error1333"
                        },
                        {
                          "$ref": "#/components/schemas/Error1334"
                        },
                        {
                          "$ref": "#/components/schemas/Error1335"
                        },
                        {
                          "$ref": "#/components/schemas/Error1336"
                        },
                        {
                          "$ref": "#/components/schemas/Error1337"
                        },
                        {
                          "$ref": "#/components/schemas/Error1338"
                        },
                        {
                          "$ref": "#/components/schemas/Error1339"
                        },
                        {
                          "$ref": "#/components/schemas/Error1340"
                        },
                        {
                          "$ref": "#/components/schemas/Error1341"
                        },
                        {
                          "$ref": "#/components/schemas/Error1342"
                        },
                        {
                          "$ref": "#/components/schemas/Error1343"
                        },
                        {
                          "$ref": "#/components/schemas/Error1407"
                        },
                        {
                          "$ref": "#/components/schemas/Error1408"
                        },
                        {
                          "$ref": "#/components/schemas/Error1409"
                        },
                        {
                          "$ref": "#/components/schemas/Error1151"
                        },
                        {
                          "$ref": "#/components/schemas/Error98888"
                        },
                        {
                          "$ref": "#/components/schemas/Error99888"
                        }
                      ]
                    }
                  },
                  "required": [
                    "execution_id",
                    "status",
                    "type",
                    "message",
                    "error"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Contracts"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateContractRequest"
              }
            }
          }
        },
        "security": [
          {
            "Auth": []
          }
        ]
      }
    },
    "/contracts/{contractId}/products": {
      "post": {
        "operationId": "Ajouter un produit à un contrat",
        "description": "Ce endpoint permet d'ajouter un produit à un contrat.",
        "parameters": [
          {
            "name": "preview",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Preview"
            },
            "explode": false
          },
          {
            "name": "contractId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ContractId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "La réponse de l'ajout d'un produit à un contrat",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "contract": {
                      "$ref": "#/components/schemas/Contract"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "success"
                      ]
                    },
                    "execution_id": {
                      "$ref": "#/components/schemas/ApiExecutionId"
                    }
                  },
                  "required": [
                    "contract",
                    "status",
                    "execution_id"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Les erreurs de l'ajout d'un produit à un contrat",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "execution_id": {
                      "$ref": "#/components/schemas/ApiExecutionId"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "error"
                      ]
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "bad_request"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "enum": [
                        "bad request"
                      ]
                    },
                    "error": {
                      "anyOf": [
                        {
                          "$ref": "#/components/schemas/Error1051"
                        },
                        {
                          "$ref": "#/components/schemas/Error1052"
                        },
                        {
                          "$ref": "#/components/schemas/Error1200"
                        },
                        {
                          "$ref": "#/components/schemas/Error1201"
                        },
                        {
                          "$ref": "#/components/schemas/Error1202"
                        },
                        {
                          "$ref": "#/components/schemas/Error1220"
                        },
                        {
                          "$ref": "#/components/schemas/Error1221"
                        },
                        {
                          "$ref": "#/components/schemas/Error1222"
                        },
                        {
                          "$ref": "#/components/schemas/Error98888"
                        },
                        {
                          "$ref": "#/components/schemas/Error99888"
                        }
                      ]
                    }
                  },
                  "required": [
                    "execution_id",
                    "status",
                    "type",
                    "message",
                    "error"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Contracts"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddProductRequest"
              }
            }
          }
        },
        "security": [
          {
            "Auth": []
          }
        ]
      },
      "delete": {
        "operationId": "Supprimer un produit d'un contrat",
        "description": "Ce endpoint permet de supprimer un produit d'un contrat.",
        "parameters": [
          {
            "name": "preview",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Preview"
            },
            "explode": false
          },
          {
            "name": "contractId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ContractId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "La réponse de la résiliation d'un produit",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "contract": {
                      "$ref": "#/components/schemas/Contract"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "success"
                      ]
                    },
                    "execution_id": {
                      "$ref": "#/components/schemas/ApiExecutionId"
                    }
                  },
                  "required": [
                    "contract",
                    "status",
                    "execution_id"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Les erreurs de la résiliation d'un produit",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "execution_id": {
                      "$ref": "#/components/schemas/ApiExecutionId"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "error"
                      ]
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "bad_request"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "enum": [
                        "bad request"
                      ]
                    },
                    "error": {
                      "anyOf": [
                        {
                          "$ref": "#/components/schemas/Error1051"
                        },
                        {
                          "$ref": "#/components/schemas/Error1052"
                        },
                        {
                          "$ref": "#/components/schemas/Error1350"
                        },
                        {
                          "$ref": "#/components/schemas/Error1351"
                        },
                        {
                          "$ref": "#/components/schemas/Error1352"
                        },
                        {
                          "$ref": "#/components/schemas/Error98888"
                        },
                        {
                          "$ref": "#/components/schemas/Error99888"
                        }
                      ]
                    }
                  },
                  "required": [
                    "execution_id",
                    "status",
                    "type",
                    "message",
                    "error"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Contracts"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TerminateProductRequest"
              }
            }
          }
        },
        "security": [
          {
            "Auth": []
          }
        ]
      }
    },
    "/geo/getCitiesByZipCode/{zipcode}": {
      "get": {
        "operationId": "Récupérer les villes par code postal",
        "description": "Ce endpoint permet de récupérer les villes par code postal.",
        "parameters": [
          {
            "name": "zipcode",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/GeoZipcode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "La réponse de la récupération des villes par code postal",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "cities": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/GeoCity"
                      }
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "success"
                      ]
                    },
                    "execution_id": {
                      "$ref": "#/components/schemas/ApiExecutionId"
                    }
                  },
                  "required": [
                    "cities",
                    "status",
                    "execution_id"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Erreurs lors de la récupération des villes par code postal",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "execution_id": {
                      "$ref": "#/components/schemas/ApiExecutionId"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "error"
                      ]
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "bad_request"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "enum": [
                        "bad request"
                      ]
                    }
                  },
                  "required": [
                    "execution_id",
                    "status",
                    "type",
                    "message"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Geo"
        ],
        "security": [
          {
            "Auth": []
          }
        ]
      }
    },
    "/products": {
      "get": {
        "operationId": "Products_listProducts",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListProductsResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The server could not understand the request due to invalid syntax.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Access is unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Products"
        ],
        "security": [
          {
            "Auth": []
          }
        ]
      },
      "post": {
        "operationId": "Products_addProduct",
        "parameters": [],
        "responses": {
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddProductResponse"
                }
              }
            }
          },
          "400": {
            "description": "The server could not understand the request due to invalid syntax.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Access is unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Products"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            }
          }
        },
        "security": [
          {
            "Auth": []
          }
        ]
      }
    },
    "/products/{productId}": {
      "get": {
        "operationId": "Products_getProduct",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReadProductResponse"
                }
              }
            }
          },
          "400": {
            "description": "The server could not understand the request due to invalid syntax.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Access is unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Products"
        ],
        "security": [
          {
            "Auth": []
          }
        ]
      },
      "put": {
        "operationId": "Products_updateProduct",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateProductResponse"
                }
              }
            }
          },
          "400": {
            "description": "The server could not understand the request due to invalid syntax.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Access is unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Products"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            }
          }
        },
        "security": [
          {
            "Auth": []
          }
        ]
      },
      "delete": {
        "operationId": "Products_deleteProduct",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteProductResponse"
                }
              }
            }
          },
          "400": {
            "description": "The server could not understand the request due to invalid syntax.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Access is unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Products"
        ],
        "security": [
          {
            "Auth": []
          }
        ]
      }
    },
    "/renters": {
      "get": {
        "operationId": "gen renter_id",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListRenterResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The server could not understand the request due to invalid syntax.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Access is unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Renters"
        ],
        "security": [
          {
            "Auth": []
          }
        ]
      },
      "post": {
        "operationId": "Renters_addRenter",
        "parameters": [],
        "responses": {
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddRenterToApiKeyResponse"
                }
              }
            }
          },
          "400": {
            "description": "The server could not understand the request due to invalid syntax.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Access is unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Renters"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "renter_id": {
                    "type": "string"
                  }
                },
                "required": [
                  "renter_id"
                ]
              }
            }
          }
        },
        "security": [
          {
            "Auth": []
          }
        ]
      }
    },
    "/renters/{renterId}": {
      "get": {
        "operationId": "Renters_getRenter",
        "parameters": [
          {
            "name": "renterId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReadRenterResponse"
                }
              }
            }
          },
          "400": {
            "description": "The server could not understand the request due to invalid syntax.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Access is unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Renters"
        ],
        "security": [
          {
            "Auth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AddProductRequest": {
        "type": "object",
        "required": [
          "start_date",
          "products"
        ],
        "properties": {
          "start_date": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Date"
              }
            ],
            "description": "La date de début du nouveau produit.\n\nLa date ne peut être supérieure à la date de fin du contrat.\n\nLa date ne peut être inférieure à la date de début du contrat ou dans le passé."
          },
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductFromCatalog"
            }
          }
        }
      },
      "AddProductResponse": {
        "type": "object",
        "required": [
          "status",
          "product"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "success"
            ]
          },
          "product": {
            "$ref": "#/components/schemas/Product"
          }
        }
      },
      "AddRenterToApiKeyResponse": {
        "type": "object",
        "required": [
          "status"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "success"
            ]
          }
        }
      },
      "ApiExecutionId": {
        "type": "string",
        "description": "L'identifiant unique de requête",
        "example": "1234567890"
      },
      "Auth": {
        "type": "object",
        "required": [
          "type",
          "in",
          "name"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "apiKey"
            ]
          },
          "in": {
            "type": "string",
            "enum": [
              "header"
            ]
          },
          "name": {
            "type": "string",
            "enum": [
              "key"
            ]
          }
        }
      },
      "CompanyName": {
        "type": "string",
        "description": "Le nom de la société",
        "example": "Société A"
      },
      "Contract": {
        "type": "object",
        "required": [
          "cid",
          "uid",
          "created_date",
          "updated_date",
          "start_date",
          "end_date",
          "status",
          "contract_type",
          "test",
          "products",
          "options",
          "price"
        ],
        "properties": {
          "cid": {
            "$ref": "#/components/schemas/ContractId"
          },
          "uid": {
            "$ref": "#/components/schemas/UserId"
          },
          "created_date": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Date"
              }
            ],
            "description": "La date de création du contrat",
            "example": "2025-01-01T00:00:00.000Z"
          },
          "updated_date": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Date"
              }
            ],
            "description": "La date de dernière modification du contrat",
            "example": "2025-01-01T00:00:00.000Z"
          },
          "start_date": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Date"
              }
            ],
            "description": "La date de début du contrat",
            "example": "2025-01-01T08:00:00.000Z"
          },
          "end_date": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Date"
              }
            ],
            "description": "La date de fin du contrat",
            "example": "2025-01-01T19:00:00.000Z"
          },
          "status": {
            "$ref": "#/components/schemas/ContractStatus"
          },
          "contract_type": {
            "$ref": "#/components/schemas/ContractType"
          },
          "company": {
            "$ref": "#/components/schemas/ContractCompany"
          },
          "individual": {
            "$ref": "#/components/schemas/ContractIndividual"
          },
          "test": {
            "$ref": "#/components/schemas/ContractTest"
          },
          "products": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ContractProduct"
            },
            "description": "Les produits du contrat. \n\nCette propriété est un objet dont les clés sont les identifiants uniques des produits assurés nommés également ContractProductId. Ils sont différents des product_id (ProductId) qui représentent les identifiants de produits enregistrés dans votre catalogue."
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContractOption"
            },
            "description": "Les options du contrat. \n\n- **assistance**: Contrat avec une souscription à l'assistance \n- **break**: Contrat avec une souscription à la casse \n- **company**: Contrat pour une entreprise \n- **home_to_work**: Contrat avec une souscription aux trajets domicile travail \n- **individual**: Contrat pour un particulier \n- **ia**: Contrat avec une souscription à l'individuel accident \n- **loa**: Contrat de location avec option d'achat \n- **pro**: Contrat pour un professionnel (hors transporteur) \n- **rc**: Contrat avec une souscription à la responsabilité civile \n- **sharing**: Contrat dans lequel les produits sont partagés entre plusieurs utilisateurs \n- **theft**: Contrat avec une souscription au vol \n- **transporter**: Contrat pour un professionnel (transporteur)\n\nLes options **break** et **theft** sont obligatoires pour tout type de contrat.",
            "example": [
              "break",
              "theft"
            ]
          },
          "price": {
            "$ref": "#/components/schemas/ContractPrice"
          }
        }
      },
      "ContractCompany": {
        "type": "object",
        "required": [
          "address",
          "zipcode",
          "city",
          "country",
          "companyName",
          "siren",
          "firstName",
          "lastName"
        ],
        "properties": {
          "address": {
            "$ref": "#/components/schemas/GeoAddress"
          },
          "zipcode": {
            "$ref": "#/components/schemas/GeoZipcode"
          },
          "city": {
            "$ref": "#/components/schemas/GeoCity"
          },
          "country": {
            "$ref": "#/components/schemas/GeoCountry"
          },
          "companyName": {
            "$ref": "#/components/schemas/CompanyName"
          },
          "siren": {
            "$ref": "#/components/schemas/Siren"
          },
          "firstName": {
            "$ref": "#/components/schemas/PolicyHolderFirstName"
          },
          "lastName": {
            "$ref": "#/components/schemas/PolicyHolderLastName"
          }
        },
        "description": "Informations sur la société associée au contrat. \n\nLa compagnie est optionnelle mais requise si le contrat est de type LLD ou LMD > 5 mois et doit être renseignée dans les options"
      },
      "ContractCompanyUpdate": {
        "type": "object",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/GeoAddress"
          },
          "zipcode": {
            "$ref": "#/components/schemas/GeoZipcode"
          },
          "city": {
            "$ref": "#/components/schemas/GeoCity"
          },
          "country": {
            "$ref": "#/components/schemas/GeoCountry"
          },
          "companyName": {
            "$ref": "#/components/schemas/CompanyName"
          },
          "siren": {
            "$ref": "#/components/schemas/Siren"
          },
          "firstName": {
            "$ref": "#/components/schemas/PolicyHolderFirstName"
          },
          "lastName": {
            "$ref": "#/components/schemas/PolicyHolderLastName"
          }
        },
        "description": "Informations sur la société associée au contrat. \n\nLa compagnie est optionnelle mais requise si le contrat est de type LLD ou LMD > 5 mois et doit être renseignée dans les options"
      },
      "ContractId": {
        "type": "string",
        "description": "L'identifiant unique du contrat",
        "example": "01CFV26E8TS0U"
      },
      "ContractIndividual": {
        "type": "object",
        "required": [
          "firstName",
          "lastName",
          "address",
          "zipcode",
          "city",
          "country",
          "phoneNumber",
          "email"
        ],
        "properties": {
          "firstName": {
            "$ref": "#/components/schemas/PolicyHolderFirstName"
          },
          "lastName": {
            "$ref": "#/components/schemas/PolicyHolderLastName"
          },
          "address": {
            "$ref": "#/components/schemas/GeoAddress"
          },
          "zipcode": {
            "$ref": "#/components/schemas/GeoZipcode"
          },
          "city": {
            "$ref": "#/components/schemas/GeoCity"
          },
          "country": {
            "$ref": "#/components/schemas/GeoCountry"
          },
          "phoneNumber": {
            "$ref": "#/components/schemas/PolicyHolderPhoneNumber"
          },
          "email": {
            "$ref": "#/components/schemas/PolicyHolderEmail"
          }
        },
        "description": "Informations sur le client associé au contrat \n\nL'individu est optionnelle mais requise si le contrat est de type LLD ou LMD > 5 mois et doit être renseignée dans les options"
      },
      "ContractIndividualUpdate": {
        "type": "object",
        "properties": {
          "firstName": {
            "$ref": "#/components/schemas/PolicyHolderFirstName"
          },
          "lastName": {
            "$ref": "#/components/schemas/PolicyHolderLastName"
          },
          "address": {
            "$ref": "#/components/schemas/GeoAddress"
          },
          "zipcode": {
            "$ref": "#/components/schemas/GeoZipcode"
          },
          "city": {
            "$ref": "#/components/schemas/GeoCity"
          },
          "country": {
            "$ref": "#/components/schemas/GeoCountry"
          },
          "phoneNumber": {
            "$ref": "#/components/schemas/PolicyHolderPhoneNumber"
          },
          "email": {
            "$ref": "#/components/schemas/PolicyHolderEmail"
          }
        },
        "description": "Informations sur le client associé au contrat \n\nL'individu est optionnelle mais requise si le contrat est de type LLD ou LMD > 5 mois et doit être renseignée dans les options"
      },
      "ContractOption": {
        "type": "string",
        "enum": [
          "assistance",
          "break",
          "company",
          "home_to_work",
          "individual",
          "ia",
          "loa",
          "pro",
          "rc",
          "sharing",
          "theft",
          "transporter",
          "no_deductible"
        ],
        "description": "Les options du contrat. \n\n- assistance: Contrat avec une souscription à l'assistance \n- break: Contrat avec une souscription à la casse \n- company: Contrat pour une entreprise \n- home_to_work: Contrat avec une souscription aux trajets domicile travail \n- individual: Contrat pour un particulier \n- ia: Contrat avec une souscription à l'individuel accident \n- loa: Contrat de location avec option d'achat \n- pro: Contrat pour un professionnel (hors transporteur) \n- rc: Contrat avec une souscription à la responsabilité civile \n- sharing: Contrat dans lequel les produits sont partagés entre plusieurs utilisateurs \n- theft: Contrat avec une souscription au vol \n- transporter: Contrat pour un professionnel (transporteur)",
        "example": "break"
      },
      "ContractPrice": {
        "type": "number",
        "format": "decimal",
        "description": "Le montant total des primes taxes comprises du contrat",
        "example": 1
      },
      "ContractProduct": {
        "type": "object",
        "required": [
          "product_id",
          "start_date",
          "end_date",
          "status",
          "data",
          "price"
        ],
        "properties": {
          "product_id": {
            "$ref": "#/components/schemas/ProductId"
          },
          "start_date": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Date"
              }
            ],
            "description": "La date de début du contrat",
            "example": "2025-01-01T00:00:00.000Z"
          },
          "end_date": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Date"
              }
            ],
            "description": "La date de fin du contrat",
            "example": "2025-01-01T19:00:00.000Z"
          },
          "status": {
            "$ref": "#/components/schemas/ContractProductStatus"
          },
          "data": {
            "$ref": "#/components/schemas/ContractProductData"
          },
          "price": {
            "$ref": "#/components/schemas/ContractProductPrice"
          },
          "replaced_by": {
            "$ref": "#/components/schemas/ContractProductId"
          }
        }
      },
      "ContractProductData": {
        "type": "object",
        "required": [
          "user_name"
        ],
        "properties": {
          "user_name": {
            "type": "string",
            "description": "Le nom et prénom de l'utilisateur",
            "example": "Dubois Jean"
          },
          "product_marked": {
            "type": "string",
            "description": "Le numéro de série ou marquage du produit.\n\nSi le contrat est un contrat de type **LLD**, ce champ est obligatoire.",
            "example": "04670010008323"
          },
          "internal_id": {
            "type": "string",
            "description": "Votre identifiant interne du produit",
            "example": "ve-1234567890"
          }
        },
        "description": "Données complémentaires sur le produit et son utilisateur. \n\n- **user_name**: Le nom et prénom de l'utilisateur \n- **product_marked**: Le numéro de série ou marquage du produit \n- **internal_id**: Votre identifiant interne du produit \n\nVous pouvez également y ajouter des propriétés supplémentaires en relation avec votre système d'informations. \n\n*Seuls les chaines de caractères et numériques sont acceptés.*"
      },
      "ContractProductDataUpdate": {
        "type": "object",
        "properties": {
          "user_name": {
            "type": "string",
            "description": "Le nom et prénom de l'utilisateur",
            "example": "Dubois Jean"
          },
          "product_marked": {
            "type": "string",
            "description": "Le numéro de série ou marquage du produit.\n\nSi le contrat est un contrat de type **LLD**, ce champ est obligatoire.",
            "example": "04670010008323"
          },
          "internal_id": {
            "type": "string",
            "description": "Votre identifiant interne du produit",
            "example": "ve-1234567890"
          }
        },
        "description": "Données complémentaires sur le produit et son utilisateur. \n\n- **user_name**: Le nom et prénom de l'utilisateur \n- **product_marked**: Le numéro de série ou marquage du produit \n- **internal_id**: Votre identifiant interne du produit \n\nVous pouvez également y ajouter des propriétés supplémentaires en relation avec votre système d'informations. \n\n*Seuls les chaines de caractères et numériques sont acceptés.*"
      },
      "ContractProductId": {
        "type": "string",
        "description": "L'identifiant unique d'un produit du contrat",
        "example": "0000-0000-0000-0000"
      },
      "ContractProductPrice": {
        "type": "number",
        "description": "Le montant des primes taxes comprises liées au produit",
        "example": 1
      },
      "ContractProductStatus": {
        "type": "string",
        "enum": [
          "open",
          "closed",
          "cancel",
          "terminated",
          "has_been_replaced"
        ],
        "description": "Le statut du produit. \n\n- **open**: Le produit est ouvert \n- **closed**: Le produit est fermé \n- **cancel**: Le produit est annulé \n- **terminated**: Le produit est résilié \n- **has_been_replaced**: Le produit a été remplacé",
        "example": "open"
      },
      "ContractStatus": {
        "type": "string",
        "enum": [
          "open",
          "closed",
          "cancel",
          "terminated"
        ],
        "description": "Le statut du contrat. \n\n- **open**: Le contrat est ouvert \n- **closed**: Le contrat est fermé \n- **cancel**: Le contrat est annulé \n- **terminated**: Le contrat est résilié",
        "example": "open"
      },
      "ContractTest": {
        "type": "boolean",
        "description": "Indique si le contrat est en test. \n\n- **true**: Le contrat est en test \n- **false**: Le contrat est en production",
        "example": true
      },
      "ContractType": {
        "type": "string",
        "enum": [
          "LCD",
          "LMD",
          "LLD"
        ],
        "description": "Le type de contrat. \n\n- **LCD**: Le contrat est un contrat de location courte durée \n- **LMD**: Le contrat est un contrat de location moyenne durée \n- **LLD**: Le contrat est un contrat de location longue durée",
        "example": "LCD"
      },
      "CreateContractRequest": {
        "type": "object",
        "required": [
          "uid",
          "end_date",
          "contract_type",
          "options",
          "products"
        ],
        "properties": {
          "uid": {
            "$ref": "#/components/schemas/UserId"
          },
          "start_date": {
            "$ref": "#/components/schemas/Date"
          },
          "end_date": {
            "$ref": "#/components/schemas/Date"
          },
          "contract_type": {
            "$ref": "#/components/schemas/ContractType"
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContractOption"
            }
          },
          "company": {
            "$ref": "#/components/schemas/ContractCompany"
          },
          "individual": {
            "$ref": "#/components/schemas/ContractIndividual"
          },
          "test": {
            "$ref": "#/components/schemas/ContractTest"
          },
          "products": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ProductDefinedInBody"
                },
                {
                  "$ref": "#/components/schemas/ProductFromCatalog"
                }
              ]
            }
          }
        },
        "description": "Créer un contrat"
      },
      "Date": {
        "type": "string",
        "format": "ISO8601 AAAA-MM-JJTHH:MM:SS,ss-/+FF:ff",
        "description": "Une date au format ISO 8601",
        "example": "2025-01-01T00:00:00.000Z"
      },
      "DeleteProductResponse": {
        "type": "object",
        "required": [
          "status"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "success"
            ]
          }
        }
      },
      "Error": {
        "type": "object",
        "required": [
          "status",
          "type",
          "message",
          "execution_id"
        ],
        "properties": {
          "status": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "execution_id": {
            "type": "string"
          }
        }
      },
      "Error1000": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1000
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "La date de début ne peut pas être dans le passé."
            ]
          }
        }
      },
      "Error1001": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1001
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "La date de fin ne peut pas être antérieure à la date de début."
            ]
          }
        }
      },
      "Error1002": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1002
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "La durée du contrat est invalide."
            ]
          }
        }
      },
      "Error1003": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1003
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Vous n'avez pas les autorisations nécessaires pour créer ce type de contrat."
            ]
          }
        }
      },
      "Error1004": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1004
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Le type de contrat spécifié est invalide."
            ]
          }
        }
      },
      "Error1005": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1005
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Une date de fin est requise."
            ]
          }
        }
      },
      "Error1006": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1006
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Un type de contrat est requis."
            ]
          }
        }
      },
      "Error1007": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1007
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Au moins un produit est requis pour créer le contrat."
            ]
          }
        }
      },
      "Error1008": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1008
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Des options sont requises pour créer un contrat."
            ]
          }
        }
      },
      "Error1009": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1009
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Des options pour la casse et le vol sont requises pour créer un contrat, y compris si l'assuré est une entreprise ou un particulier."
            ]
          }
        }
      },
      "Error1010": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1010
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Les options pour le contrat sont invalides."
            ]
          }
        }
      },
      "Error1011": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1011
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Le document n'existe pas."
            ]
          }
        }
      },
      "Error1012": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1012
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Un uid est requis pour créer un contrat."
            ]
          }
        }
      },
      "Error1013": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1013
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Une entreprise est requise pour créer ce contrat."
            ]
          }
        }
      },
      "Error1014": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1014
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Un particulier est requis pour créer ce contrat."
            ]
          }
        }
      },
      "Error1015": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1015
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Des options pour la casse et le vol sont requises pour créer un contrat, en précisant si l'assuré est une entreprise ou un particulier, et en définissant le cas d'usage du(des) produit(s): home_to_work, professional, ou transporter."
            ]
          }
        }
      },
      "Error1016": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1016
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Une ia est requise pour créer ce contrat."
            ]
          }
        }
      },
      "Error1017": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1017
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "L'ia est invalide."
            ]
          }
        }
      },
      "Error1018": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1018
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Des options pour la casse et le vol sont requises pour créer un contrat."
            ]
          }
        }
      },
      "Error1019": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1019
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Des options pour la casse et le vol sont requises pour créer un contrat."
            ]
          }
        }
      },
      "Error1020": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1020
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Des options pour la casse et le vol sont requises pour créer un contrat, y compris si l'assuré est une entreprise ou un particulier."
            ]
          }
        }
      },
      "Error1021": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1021
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "La date de fin ne peut pas être dans le passé."
            ]
          }
        }
      },
      "Error1022": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1022
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Pour les cas spéciaux, veuillez contacter tulip"
            ]
          }
        }
      },
      "Error1050": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1050
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Le contrat a commencé il y a plus de 4 heures."
            ]
          }
        }
      },
      "Error1051": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1051
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Le contrat n'existe pas."
            ]
          }
        }
      },
      "Error1052": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1052
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Le contrat n'est pas ouvert."
            ]
          }
        }
      },
      "Error1100": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1100
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Un nom d'entreprise est requis pour créer ce contrat."
            ]
          }
        }
      },
      "Error1101": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1101
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Un numéro SIREN est requis pour créer ce contrat."
            ]
          }
        }
      },
      "Error1102": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1102
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Le SIREN doit être de 9 caractères pour la France et de 11 caractères pour l'Italie."
            ]
          }
        }
      },
      "Error1103": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1103
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Un prénom est requis pour créer ce contrat."
            ]
          }
        }
      },
      "Error1104": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1104
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Un nom est requis pour créer ce contrat."
            ]
          }
        }
      },
      "Error1105": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1105
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Une adresse est requise pour créer ce contrat."
            ]
          }
        }
      },
      "Error1106": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1106
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Un code postal est requis pour créer ce contrat."
            ]
          }
        }
      },
      "Error1107": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1107
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Une ville est requise pour créer ce contrat."
            ]
          }
        }
      },
      "Error1108": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1108
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Un pays est requis pour créer ce contrat."
            ]
          }
        }
      },
      "Error1109": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1109
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Les détails de l'entreprise sont invalides."
            ]
          }
        }
      },
      "Error1150": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1150
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Les informations de l'entreprise sont gelées."
            ]
          }
        }
      },
      "Error1151": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1151
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Le compte du particulier est gelé."
            ]
          }
        }
      },
      "Error1200": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1200
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Un produit est requis pour créer ce contrat."
            ]
          }
        }
      },
      "Error1201": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1201
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Le produit n'existe pas."
            ]
          }
        }
      },
      "Error1202": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1202
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Vous n'avez pas la permission de créer un contrat avec ce type de produit."
            ]
          }
        }
      },
      "Error1203": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1203
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Le document n'existe pas."
            ]
          }
        }
      },
      "Error1220": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1220
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Des données sont requises pour ce produit."
            ]
          }
        }
      },
      "Error1221": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1221
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Les produits sont invalides."
            ]
          }
        }
      },
      "Error1222": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1222
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Un type de produit est requis pour créer ce contrat."
            ]
          }
        }
      },
      "Error1223": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1223
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Le type de produit est invalide."
            ]
          }
        }
      },
      "Error1224": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1224
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Un sous-type de produit est requis pour créer ce contrat."
            ]
          }
        }
      },
      "Error1225": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1225
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Le sous-type de produit est invalide."
            ]
          }
        }
      },
      "Error1226": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1226
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Une valeur hors taxe est requise pour créer ce contrat."
            ]
          }
        }
      },
      "Error1227": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1227
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "La valeur hors taxe du produit est invalide."
            ]
          }
        }
      },
      "Error1228": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1228
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Une marque est requise pour créer ce contrat."
            ]
          }
        }
      },
      "Error1229": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1229
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "La marque du produit est invalide."
            ]
          }
        }
      },
      "Error1330": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1330
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "La référence du produit n'existe pas dans le contrat."
            ]
          }
        }
      },
      "Error1331": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1331
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Le statut du produit ne permet pas cette action."
            ]
          }
        }
      },
      "Error1332": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1332
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Le nom d'utilisateur ne peut pas être vide."
            ]
          }
        }
      },
      "Error1333": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1333
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Le numéro interne ne peut pas être vide."
            ]
          }
        }
      },
      "Error1334": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1334
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Le produit marqué ne peut pas être vide."
            ]
          }
        }
      },
      "Error1335": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1335
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Le produit marqué doit être une chaîne de caractères."
            ]
          }
        }
      },
      "Error1336": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1336
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Le nom d'utilisateur doit être une chaîne de caractères."
            ]
          }
        }
      },
      "Error1337": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1337
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Le numéro interne doit être une chaîne de caractères."
            ]
          }
        }
      },
      "Error1338": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1338
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Vous n'êtes pas autorisé à mettre à jour la date de début ou la date de fin."
            ]
          }
        }
      },
      "Error1339": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1339
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "La date de début ne peut pas être antérieure à la date de début du contrat."
            ]
          }
        }
      },
      "Error1340": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1340
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "La date de début ne peut pas être postérieure à la date de fin du contrat."
            ]
          }
        }
      },
      "Error1341": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1341
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "La date de fin ne peut pas être antérieure à la date de début du contrat."
            ]
          }
        }
      },
      "Error1342": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1342
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "La date de fin ne peut pas être postérieure à la date de fin du contrat."
            ]
          }
        }
      },
      "Error1343": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1343
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "La date de début ne peut pas être postérieure à la date de début du produit."
            ]
          }
        }
      },
      "Error1350": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1350
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Le produit n'existe pas, ou est fermé, ou a été résilié."
            ]
          }
        }
      },
      "Error1351": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1351
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "La date de fin ne peut pas être dans le passé."
            ]
          }
        }
      },
      "Error1352": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1352
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "La date de fin ne peut pas être dans le futur du contrat."
            ]
          }
        }
      },
      "Error1400": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1400
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Un prénom est requis pour créer ce contrat."
            ]
          }
        }
      },
      "Error1401": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1401
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Un nom est requis pour créer ce contrat."
            ]
          }
        }
      },
      "Error1402": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1402
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Une adresse est requise pour créer ce contrat."
            ]
          }
        }
      },
      "Error1403": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1403
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Un code postal est requis pour créer ce contrat."
            ]
          }
        }
      },
      "Error1404": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1404
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Une ville est requise pour créer ce contrat."
            ]
          }
        }
      },
      "Error1405": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1405
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Un numéro de téléphone est requis pour créer ce contrat."
            ]
          }
        }
      },
      "Error1406": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1406
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Un pays est requis pour créer ce contrat."
            ]
          }
        }
      },
      "Error1407": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1407
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Le code postal est invalide."
            ]
          }
        }
      },
      "Error1408": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1408
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "La ville est invalide."
            ]
          }
        }
      },
      "Error1409": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1409
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Le pays est invalide."
            ]
          }
        }
      },
      "Error1410": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              1410
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Les détails du particulier sont invalides."
            ]
          }
        }
      },
      "Error98888": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              98888
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "Vous n'avez pas les autorisations nécessaires."
            ]
          }
        }
      },
      "Error99888": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "number",
            "enum": [
              99888
            ]
          },
          "message": {
            "type": "string",
            "enum": [
              "La limite a été atteinte. Vous ne pouvez pas effectuer cette action. Veuillez contacter le support."
            ]
          }
        }
      },
      "GeoAddress": {
        "type": "string",
        "description": "L'adresse",
        "example": "123 Rue de la Paix"
      },
      "GeoCity": {
        "type": "string",
        "description": "La ville",
        "example": "PARIS-1ER-ARRONDISSEMENT"
      },
      "GeoCountry": {
        "type": "string",
        "description": "Le pays",
        "example": "FR"
      },
      "GeoZipcode": {
        "type": "string",
        "description": "Le code postal",
        "example": "75001"
      },
      "ListProductsResponse": {
        "type": "object",
        "required": [
          "status",
          "products"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "success"
            ]
          },
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Product"
            }
          }
        }
      },
      "ListRenterResponse": {
        "type": "object",
        "required": [
          "status",
          "renters"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "success"
            ]
          },
          "renters": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            }
          }
        }
      },
      "PaginationLimit": {
        "type": "number",
        "description": "Le nombre de résultats à retourner"
      },
      "PaginationSkip": {
        "type": "number",
        "description": "Le nombre de résultats à ignorer"
      },
      "PolicyHolderEmail": {
        "type": "string",
        "description": "L'email du titulaire de la police",
        "example": "pierre.dupont@example.com"
      },
      "PolicyHolderFirstName": {
        "type": "string",
        "description": "Le prénom du titulaire de la police",
        "example": "Pierre"
      },
      "PolicyHolderLastName": {
        "type": "string",
        "description": "Le nom du titulaire de la police",
        "example": "Dupont"
      },
      "PolicyHolderPhoneNumber": {
        "type": "string",
        "description": "Le numéro de téléphone du titulaire de la police",
        "example": "06 06 06 06 06"
      },
      "Preview": {
        "type": "boolean",
        "description": "Prévisualisation d'une requête. \n\n- **true** : Prévisualisation de la requête sans modification des données \n- **false** : Prévisualisation de la requête avec modification des données \n\nPar défaut la valeur est **false** \n\nCette fonctionnalité peut être utilisée pour consulter une tarification sans créer de contrat",
        "example": false
      },
      "Product": {
        "type": "object",
        "required": [
          "uid",
          "product_type",
          "title",
          "data",
          "value_excl"
        ],
        "properties": {
          "uid": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the product"
          },
          "product_type": {
            "$ref": "#/components/schemas/ProductType"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "properties": {
              "product_subtype": {
                "$ref": "#/components/schemas/ProductSubtype"
              },
              "brand": {
                "$ref": "#/components/schemas/ProductBrand"
              },
              "model": {
                "$ref": "#/components/schemas/ProductModel"
              }
            },
            "required": [
              "product_subtype",
              "brand",
              "model"
            ]
          },
          "purchased_date": {
            "type": "string",
            "format": "date-time"
          },
          "value_excl": {
            "$ref": "#/components/schemas/ProductValueExcl"
          }
        }
      },
      "ProductBrand": {
        "type": "string",
        "description": "Marque du matériel",
        "example": "SuperVélo"
      },
      "ProductDefinedInBody": {
        "type": "object",
        "required": [
          "product_type",
          "product_subtype",
          "value_excl",
          "brand",
          "model",
          "data"
        ],
        "properties": {
          "product_type": {
            "$ref": "#/components/schemas/ProductType"
          },
          "product_subtype": {
            "$ref": "#/components/schemas/ProductSubtype"
          },
          "value_excl": {
            "$ref": "#/components/schemas/ProductValueExcl"
          },
          "brand": {
            "$ref": "#/components/schemas/ProductBrand"
          },
          "model": {
            "$ref": "#/components/schemas/ProductModel"
          },
          "data": {
            "$ref": "#/components/schemas/ContractProductData"
          }
        }
      },
      "ProductFromCatalog": {
        "type": "object",
        "required": [
          "product_id",
          "data"
        ],
        "properties": {
          "product_id": {
            "$ref": "#/components/schemas/ProductId"
          },
          "data": {
            "$ref": "#/components/schemas/ContractProductData"
          }
        }
      },
      "ProductId": {
        "type": "string",
        "description": "L'identifiant unique du produit",
        "example": "01CFV26E8TS0U"
      },
      "ProductModel": {
        "type": "string",
        "description": "Modèle du matériel",
        "example": "VTT"
      },
      "ProductSubtype": {
        "type": "string",
        "enum": [
          "standard",
          "electric",
          "cargo",
          "remorque",
          "furniture",
          "tent",
          "decorations",
          "tableware",
          "entertainment",
          "action-cam",
          "drone",
          "camera",
          "video-camera",
          "stabilizer",
          "phone",
          "computer",
          "tablet",
          "small-appliance",
          "large-appliance",
          "construction-equipment",
          "diy-tools",
          "electric-diy-tools",
          "gardening-tools",
          "electric-gardening-tools",
          "kitesurf",
          "foil",
          "windsurf",
          "sailboat",
          "kayak",
          "canoe",
          "water-ski",
          "wakeboard",
          "mono-ski",
          "buoy",
          "paddle",
          "surf",
          "pedalo",
          "ski",
          "snowboard",
          "snowshoe"
        ]
      },
      "ProductType": {
        "type": "string",
        "enum": [
          "bike",
          "wintersports",
          "watersports",
          "event",
          "high-tech",
          "small-tools"
        ]
      },
      "ProductValueExcl": {
        "type": "number",
        "format": "decimal",
        "description": "Prix du matériel en excluant les taxes",
        "example": 1000
      },
      "ReadProductResponse": {
        "type": "object",
        "required": [
          "status",
          "product"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "success"
            ]
          },
          "product": {
            "$ref": "#/components/schemas/Product"
          }
        }
      },
      "ReadRenterResponse": {
        "type": "object",
        "required": [
          "status",
          "renter"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "success"
            ]
          },
          "renter": {
            "type": "object",
            "properties": {
              "uid": {
                "type": "string"
              },
              "company": {
                "type": "object",
                "properties": {
                  "company_name": {
                    "type": "string"
                  },
                  "last_name": {
                    "type": "string"
                  },
                  "first_name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "phone_number": {
                    "type": "string"
                  },
                  "address": {
                    "type": "string"
                  },
                  "city": {
                    "type": "string"
                  },
                  "zipcode": {
                    "type": "string"
                  },
                  "country": {
                    "type": "string"
                  }
                },
                "required": [
                  "company_name",
                  "last_name",
                  "first_name",
                  "email",
                  "phone_number",
                  "address",
                  "city",
                  "zipcode",
                  "country"
                ]
              },
              "options": {
                "type": "object",
                "properties": {
                  "option": {
                    "type": "boolean"
                  },
                  "inclusion": {
                    "type": "boolean"
                  },
                  "LCD": {
                    "type": "boolean"
                  },
                  "LMD": {
                    "type": "boolean"
                  },
                  "LLD": {
                    "type": "boolean"
                  },
                  "products": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "bike": {
                          "type": "object",
                          "properties": {
                            "translations": {
                              "type": "object",
                              "properties": {
                                "en": {
                                  "type": "string"
                                },
                                "fr": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "en",
                                "fr"
                              ]
                            },
                            "subtypes": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string"
                                  },
                                  "translations": {
                                    "type": "object",
                                    "properties": {
                                      "en": {
                                        "type": "string"
                                      },
                                      "fr": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "en",
                                      "fr"
                                    ]
                                  }
                                },
                                "required": [
                                  "type",
                                  "translations"
                                ]
                              }
                            }
                          },
                          "required": [
                            "translations",
                            "subtypes"
                          ]
                        }
                      },
                      "required": [
                        "bike"
                      ]
                    }
                  }
                },
                "required": [
                  "option",
                  "inclusion",
                  "LCD",
                  "LMD",
                  "LLD",
                  "products"
                ]
              }
            },
            "required": [
              "uid",
              "company",
              "options"
            ]
          }
        }
      },
      "Siren": {
        "type": "string",
        "description": "Le numéro de SIREN de la société",
        "example": "123456789"
      },
      "TerminateContractReason": {
        "type": "string",
        "description": "Les raisons de résiliation",
        "example": "Le client a changé d'avis, le contrat n'est plus nécessaire, etc."
      },
      "TerminateContractRequest": {
        "type": "object",
        "required": [
          "reason"
        ],
        "properties": {
          "reason": {
            "$ref": "#/components/schemas/TerminateContractReason"
          },
          "end_date": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Date"
              }
            ],
            "description": "La date de fin du contrat. Si non fournie, le contrat sera résilié au moment de la résiliation.\n\nVous pouvez également fournir une date de fin pour le contrat, ce qui permet de résiler le contrat à une date future.\n\nLa date ne peut être supérieure à la date de fin du contrat."
          }
        }
      },
      "TerminateProductRequest": {
        "type": "object",
        "required": [
          "reason",
          "products"
        ],
        "properties": {
          "reason": {
            "$ref": "#/components/schemas/TerminateContractReason"
          },
          "end_date": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Date"
              }
            ],
            "description": "La date de fin du contrat. Si non fournie, le contrat sera résilié au moment de la résiliation.\n\nVous pouvez également fournir une date de fin pour le contrat, ce qui permet de résiler le contrat à une date future.\n\nLa date ne peut être supérieure à la date de fin du contrat."
          },
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContractProductId"
            }
          }
        }
      },
      "UpdateContractRequest": {
        "type": "object",
        "properties": {
          "start_date": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Date"
              }
            ],
            "description": "La date de début du contrat. Si non fournie, la date de début du contrat sera inchangée.\n\nLa date ne peut être supérieure à la date de fin du contrat.\n\nSi le contrat a démarré depuis plus de 1h, la date de début ne peut être modifiée."
          },
          "end_date": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Date"
              }
            ],
            "description": "La date de fin du contrat. Si non fournie, la date de fin du contrat sera inchangée.\n\nLa date de fin ne peut pas être inférieure ou supérieure à la durée du contrat type."
          },
          "products": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ContractProductDataUpdate"
            },
            "description": "Les produits du contrat. Si non fourni, les produits du contrat seront inchangés.\n\nLa modification d'un produit crée un nouveau produit, l'ancien produit aura sont statut **has_been_replaced** et contiendra l'identifiant (ContractProductId) dans la propriété **replaced_by** du nouveau produit."
          },
          "company": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContractCompanyUpdate"
              }
            ],
            "description": "Les informations de l'entreprise. Si non fourni, les informations de l'entreprise seront inchangées.\n\nSi le contrat a commencé depuis plus de 1h, cette propriété ne peuvent être modifiées."
          },
          "individual": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContractIndividualUpdate"
              }
            ],
            "description": "Les informations du particulier. Si non fourni, les informations du particulier seront inchangées.\n\nSi le contrat a commencé depuis plus de 1h, cette propriété ne peuvent être modifiées."
          }
        }
      },
      "UpdateProductResponse": {
        "type": "object",
        "required": [
          "status",
          "product"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "success"
            ]
          },
          "product": {
            "$ref": "#/components/schemas/Product"
          }
        }
      },
      "UserId": {
        "type": "string",
        "description": "L'identifiant unique de l'utilisateur",
        "example": "A1234567890"
      },
      "Versions": {
        "type": "string",
        "enum": [
          "v2"
        ]
      }
    },
    "securitySchemes": {
      "Auth": {
        "type": "apiKey",
        "in": "header",
        "name": "key"
      }
    }
  },
  "servers": [
    {
      "url": "https://api.mytulip.io/v2",
      "description": "Single server endpoint",
      "variables": {}
    }
  ]
}
